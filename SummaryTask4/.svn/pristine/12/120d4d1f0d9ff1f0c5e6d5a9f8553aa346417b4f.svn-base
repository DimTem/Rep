package ua.nure.bratiuschenko.SummaryTask4.dao;

import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import ua.nure.bratiuschenko.SummaryTask4.domain.Patient;
import ua.nure.bratiuschenko.SummaryTask4.utils.Connector;

public class PatientDAOImpl implements PatientDAO {

	public static final String SQL_SELECT_ALL_PATIENTS = "SELECT * FROM patient";
	public static final String SQL_SELECT_ALL_BYALPHABET = "SELECT * FROM patient  ORDER BY `surname` ASC";
	public static final String SQL_SELECT_ALL_DATEOFBIRTH = "SELECT * FROM patient  ORDER BY `date of birth` ASC";
	static String sql = "INSERT INTO `jtj-948`.`patient` (id,surname,name,patronymic,`date of birth`,`id of attending medical doctor`,procedures, medicines, operations,diagnosis,`status`)"
			+ "VALUES (?,?,?,?,?,?,?,?,?,?,?)";
	private static final String SQL_UPDATE_FROM_PATIENT = "UPDATE `jtj-948`.`patient` SET `id`=?, `surname`=?, `name`=?, `patronymic`=?, `date of birth`=?, `id of attending medical doctor`=?,`procedures`=?, `medicines`=?, `operations`=?, `diagnosis`=?, `status`=?  WHERE `id`=?";
	private static final String SQL_DELETE_FROM_PATIENT = "DELETE FROM patient where id=?";
	
	private static final String SQL_UPDATE_MEDICINES_FROM_PATIENT = "UPDATE `jtj-948`.`patient` SET `id`=?, `medicines`=? WHERE `id`=?";
	private static final String SQL_UPDATE_OPERATION_FROM_PATIENT = "UPDATE `jtj-948`.`patient` SET `id`=?, `operations`=? WHERE `id`=?";
	private static final String SQL_UPDATE_PROCEDURES_FROM_PATIENT = "UPDATE `jtj-948`.`patient` SET `id`=?, `procedures`=? WHERE `id`=?";
	private static final String SQL_UPDATE_DIAGNOSIS_FROM_PATIENT = "UPDATE `jtj-948`.`patient` SET `id`=?, `diagnosis`=? WHERE `id`=?";
	
	private static final String SQL_DISCHARGE_PATIENT = "UPDATE `jtj-948`.`patient` SET `id`=?, `status`=?, `diagnosis`=? WHERE `id`=?";
	private Connection connection;

	public PatientDAOImpl(Connection connection) {
		this.connection = connection;
	}

	@Override
	public List<Patient> findAll() {
		List<Patient> patients = new ArrayList<Patient>();
		try (Statement st = connection.createStatement()) {
			ResultSet rs = st.executeQuery(SQL_SELECT_ALL_PATIENTS);
			while (rs.next()) {
				Patient patient = extractPatientFromResultSet(rs);
				patients.add(patient);
			}
		} catch (SQLException e) {
			// TODO: log with error level
			System.err.println("SQL exception (request or table failed): " + e);
		}
		return patients;
	}

	@Override
	public List<Patient> findPatientsSortedByDate() {
		List<Patient> patients = new ArrayList<Patient>();
		try (Statement st = connection.createStatement()) {
			ResultSet rs = st.executeQuery(SQL_SELECT_ALL_DATEOFBIRTH);
			while (rs.next()) {
				Patient patient = extractPatientFromResultSet(rs);
				patients.add(patient);
			}
		} catch (SQLException e) {
			// TODO: log with error level
			System.err.println("SQL exception (request or table failed): " + e);
		}
		return patients;
	}

	@Override
	public List<Patient> findPatientsSortedBySurname() {
		List<Patient> patients = new ArrayList<Patient>();
		try (Statement st = connection.createStatement()) {
			ResultSet rs = st.executeQuery(SQL_SELECT_ALL_BYALPHABET);
			while (rs.next()) {
				Patient patient = extractPatientFromResultSet(rs);
				patients.add(patient);
			}
		} catch (SQLException e) {
			// TODO: log with error level
			System.err.println("SQL exception (request or table failed): " + e);
		}
		return patients;
	}

	protected Patient extractPatientFromResultSet(ResultSet rs)
			throws SQLException {
		Patient patient = new Patient();
		patient.setId(rs.getInt(1));
		patient.setSurname(rs.getString(2));
		patient.setName(rs.getString(3));
		patient.setPatronymic(rs.getString(4));
		patient.setDateOfBirth(rs.getDate(5));
		patient.setIdOfAttendingMedicalDoctor(rs.getInt(6));
		patient.setProcedures(rs.getString(7));
		patient.setMedicines(rs.getString(8));
		patient.setOperations(rs.getString(9));
		patient.setDiagnosis(rs.getString(10));
		patient.setStatus(rs.getString(11));
		return patient;
	}

	public static boolean create(int id, String surname, String name,
			String patronymic, Date dateOfBirth,
			int idOfAttendingMedicalDoctor, String procedures,
			String medicines, String operations, String diagnosis,String status, Connector cnr) {
		boolean flag = false;
		Connection cn = null;
		PreparedStatement ps = null;
		try {
			cn = Connector.getConnection();
			ps = cn.prepareStatement(sql);
			ps.setInt(1, id);
			ps.setString(2, surname);
			ps.setString(3, name);
			ps.setString(4, patronymic);
			ps.setDate(5, dateOfBirth);
			ps.setInt(6, idOfAttendingMedicalDoctor);
			ps.setString(7, procedures);
			ps.setString(8, medicines);
			ps.setString(9, operations);
			ps.setString(10, diagnosis);
			ps.setString(11, status);
			ps.executeUpdate();
			flag = true;

		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			if (ps != null) {
				try {
					ps.close();
					// Connector.putConnection(cn);
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		}
		return flag;

	}

	public static boolean update(int id, String surname, String name,
			String patronymic, Date dateOfBirth,
			int idOfAttendingMedicalDoctor, String procedures,
			String medicines, String operations, String diagnosis,String status, Connector cnr) {
		Connection cn = null;
		boolean flag = false;
		PreparedStatement ps = null;
		try {
			cn = Connector.getConnection();
			ps = cn.prepareStatement(SQL_UPDATE_FROM_PATIENT);
			ps.setInt(1, id);
			ps.setString(2, surname);
			ps.setString(3, name);
			ps.setString(4, patronymic);
			ps.setDate(5, dateOfBirth);
			ps.setInt(6, idOfAttendingMedicalDoctor);
			ps.setString(7, procedures);
			ps.setString(8, medicines);
			ps.setString(9, operations);
			ps.setString(10, diagnosis);
			ps.setString(11, status);
			ps.setInt(12, id);
			ps.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			if (ps != null) {
				try {
					ps.close();
					// Connector.putConnection(cn);
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		}
		return flag;

	}
	public static boolean delete(Integer id, Connector cnr) {
		boolean flag = false;
		Connection cn = null;
		PreparedStatement ps = null;
		try {
			cn = Connector.getConnection();
			ps = cn.prepareStatement(SQL_DELETE_FROM_PATIENT);
			ps.setInt(1, id);
			ps.execute();
			flag = true;
		} catch (SQLException e) {
			System.err.println("SQL exception (request or table failed): " + e);
		} finally {
			if (ps != null) {
				try {
					ps.close();
					// Connector.putConnection(cn);
				} catch (SQLException e) {
					System.err.println("Close statement failed: " + e);
				}
			}
		}

		return flag;
	}
	
	public static boolean updateMedicines(int id, String medicines, Connector cnr) {
		Connection cn = null;
		boolean flag = false;
		PreparedStatement ps = null;
		try {
			cn = Connector.getConnection();
			ps = cn.prepareStatement(SQL_UPDATE_MEDICINES_FROM_PATIENT);
			ps.setInt(1, id);
			ps.setString(2, medicines);
			ps.setInt(3, id);
			ps.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			if (ps != null) {
				try {
					ps.close();
					// Connector.putConnection(cn);
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		}
		return flag;

	}
	

	public static boolean updateOperations(int id, String operations, Connector cnr) {
		Connection cn = null;
		boolean flag = false;
		PreparedStatement ps = null;
		try {
			cn = Connector.getConnection();
			ps = cn.prepareStatement(SQL_UPDATE_OPERATION_FROM_PATIENT);
			ps.setInt(1, id);
			ps.setString(2, operations);
			ps.setInt(3, id);
			ps.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			if (ps != null) {
				try {
					ps.close();
					// Connector.putConnection(cn);
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		}
		return flag;

	}
	
	public static boolean updateProcedures(int id, String procedures, Connector cnr) {
		Connection cn = null;
		boolean flag = false;
		PreparedStatement ps = null;
		try {
			cn = Connector.getConnection();
			ps = cn.prepareStatement(SQL_UPDATE_PROCEDURES_FROM_PATIENT);
			ps.setInt(1, id);
			ps.setString(2, procedures);
			ps.setInt(3, id);
			ps.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			if (ps != null) {
				try {
					ps.close();
					// Connector.putConnection(cn);
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		}
		return flag;

	}
	public static boolean updateDiagnosis(int id, String diagnosis, Connector cnr) {
		Connection cn = null;
		boolean flag = false;
		PreparedStatement ps = null;
		try {
			cn = Connector.getConnection();
			ps = cn.prepareStatement(SQL_UPDATE_DIAGNOSIS_FROM_PATIENT);
			ps.setInt(1, id);
			ps.setString(2, diagnosis);
			ps.setInt(3, id);
			ps.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			if (ps != null) {
				try {
					ps.close();
					// Connector.putConnection(cn);
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		}
		return flag;

	}
	
	public static boolean Discharge(int id, String status,String finalDiagn, Connector cnr) {
		Connection cn = null;
		boolean flag = false;
		PreparedStatement ps = null;
		try {
			cn = Connector.getConnection();
			ps = cn.prepareStatement(SQL_DISCHARGE_PATIENT);
			ps.setInt(1, id);
			ps.setString(2, status);
			ps.setString(3, finalDiagn);
			ps.setInt(4, id);
			ps.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			if (ps != null) {
				try {
					ps.close();
					// Connector.putConnection(cn);
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		}
		return flag;

	}
}
