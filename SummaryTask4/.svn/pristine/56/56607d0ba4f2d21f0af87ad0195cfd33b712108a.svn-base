package ua.nure.bratiuschenko.SummaryTask4.web.controllers;

import java.io.IOException;
import java.sql.Date;
import java.util.List;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import ua.nure.bratiuschenko.SummaryTask4.dao.DoctorDAO;
import ua.nure.bratiuschenko.SummaryTask4.dao.DoctorDAOImpl;
import ua.nure.bratiuschenko.SummaryTask4.domain.CollectionDoctor;
import ua.nure.bratiuschenko.SummaryTask4.domain.Doctor;
import ua.nure.bratiuschenko.SummaryTask4.exception.DBException;
import ua.nure.bratiuschenko.SummaryTask4.utils.Connector;
import ua.nure.bratiuschenko.SummaryTask4.web.util.TableGenerator;

import org.apache.log4j.Logger;

/**
 * Servlet implementation class Doctor
 */
@WebServlet("/Doctor")
public class DoctorForAdminController extends HttpServlet {
	private static final long serialVersionUID = 1L;
	private static final Logger log = Logger
			.getLogger(DoctorForAdminController.class);

	private DoctorDAO doctorDAO;

	/**
	 * @see HttpServlet#HttpServlet()
	 */
	public DoctorForAdminController() {
		super();
		doctorDAO = new DoctorDAOImpl(Connector.getConnection());
	}

	protected void delete(HttpServletRequest request,
			HttpServletResponse response, Connector cnr) throws IOException {
		response.getWriter()
				.print("<br><form method=\"post\">DELETE: ID=<input type=\"text\" name=\"delete_id\"> <input type=\"submit\""
						+ " name=\"dsubmit\" value=\"Delete\"></form>");
		if (request.getParameter("dsubmit") != null
				&& request.getParameter("delete_id") != null) {
			boolean result = DoctorDAOImpl.delete(
					Integer.valueOf(request.getParameter("delete_id")), cnr);
			response.sendRedirect("/SummaryTask4/Doctor");
			if (!result) {
				response.getWriter().print("<p>Something gone wrong</p>");

			}
		}
	}

	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse
	 *      response)
	 */
	protected void doGet(HttpServletRequest request,
			HttpServletResponse response) throws ServletException, IOException {
		Connector cnr = new Connector(Connector.admUser, Connector.admPass);
		response.setContentType("text/html");

		int nOPOtolar;
		try {
			nOPOtolar = doctorDAO.findNOPOtolaryngologistt();
			if (nOPOtolar != 0) {
				Integer numberOfPatients = nOPOtolar;
				Integer id = 10;
				DoctorDAOImpl.updateNOP(numberOfPatients, id, cnr);
				log.debug("update number of Otolaringologists");
			}
		} catch (DBException e1) {
			log.error("can not update number of otolaringologists", e1);
		}

		int nOPPsycho;
		try {
			nOPPsycho = doctorDAO.findNOPPsychologist();
			if (nOPPsycho != 0) {
				Integer numberOfPatients = nOPPsycho;
				Integer id = 9;
				DoctorDAOImpl.updateNOP(numberOfPatients, id, cnr);
				log.debug("update number of psychologists");
			}
		} catch (DBException e1) {
			log.error("can not update number of psychologists", e1);
		}

		int nOPNeuro;
		try {
			nOPNeuro = doctorDAO.findNOPNeuropathologist();
			if (nOPNeuro != 0) {
				Integer numberOfPatients = nOPNeuro;
				Integer id = 8;
				DoctorDAOImpl.updateNOP(numberOfPatients, id, cnr);
				log.debug("update number of neuropatologists");
			}
		} catch (DBException e1) {
			log.error("can not update number of neuropatologists", e1);
		}
		int nOPGYN;
		try {
			nOPGYN = doctorDAO.findNOPGynaecologist();
			if (nOPGYN != 0) {
				Integer numberOfPatients = nOPGYN;
				Integer id = 7;
				DoctorDAOImpl.updateNOP(numberOfPatients, id, cnr);
				log.debug("update number of gynaecologists");
			}
		} catch (DBException e1) {
			log.error("can not update number of gynaecologists", e1);
		}
		int nOPNurseT;
		try {
			nOPNurseT = doctorDAO.findNOPNurseT();
			if (nOPNurseT != 0) {
				Integer numberOfPatients = nOPNurseT;
				Integer id = 6;
				DoctorDAOImpl.updateNOP(numberOfPatients, id, cnr);
				log.debug("update number of nurses");
			}
		} catch (DBException e1) {
			log.error("can not update number of gynaecologists", e1);
		}

		int nOPNurse;
		try {
			nOPNurse = doctorDAO.findNOPNurse();
			if (nOPNurse != 0) {
				Integer numberOfPatients = nOPNurse;
				Integer id = 5;
				DoctorDAOImpl.updateNOP(numberOfPatients, id, cnr);
				log.debug("update number of nurses");
			}
		} catch (DBException e1) {
			log.error("can not update number of gynaecologists", e1);
		}

		int nOPSurgeonT;
		try {
			nOPSurgeonT = doctorDAO.findNOPSurgeonT();
			if (nOPSurgeonT != 0) {
				Integer numberOfPatients = nOPSurgeonT;
				Integer id = 4;
				DoctorDAOImpl.updateNOP(numberOfPatients, id, cnr);
				log.debug("update number of surgeons");
			}
		} catch (DBException e1) {
			log.error("can not update number of surgeons", e1);
		}
		int nOPDentist;
		try {
			nOPDentist = doctorDAO.findNOPDentist();
			if (nOPDentist != 0) {
				Integer numberOfPatients = nOPDentist;
				Integer id = 3;
				DoctorDAOImpl.updateNOP(numberOfPatients, id, cnr);
				log.debug("update number of dentists");
			}
		} catch (DBException e1) {
			log.error("can not update number of dentists");
		}
		int nOPTherapeutist;
		try {
			nOPTherapeutist = doctorDAO.findNOPTherapeutist();
			if (nOPTherapeutist != 0) {
				Integer numberOfPatients = nOPTherapeutist;
				Integer id = 2;
				DoctorDAOImpl.updateNOP(numberOfPatients, id, cnr);
				log.debug("update number of therapeutists");
			}
		} catch (DBException e1) {
			log.error("can not update number of therapeutists");
		}

		int nOPSurgeons;
		try {
			nOPSurgeons = doctorDAO.findNOPSurgeons();
			if (nOPSurgeons != 0) {
				Integer numberOfPatients = nOPSurgeons;
				Integer id = 1;
				DoctorDAOImpl.updateNOP(numberOfPatients, id, cnr);
				log.debug("update number of surgeons");
			}
		} catch (DBException e) {
			log.error("can not update number of surgeons");
		}

		List<Doctor> doctors = null;
		try {
			doctors = doctorDAO.findAll();
		} catch (DBException e) {
			log.error("can not generate doctors table", e);
		}
		String doctorsTable = TableGenerator.generateDoctorsTable(doctors);

		if (request.getParameter("dsubmit") == null
				&& request.getParameter("nsubmit") == null
				&& request.getParameter("gsubmit") == null
				&& request.getParameter("neursubmit") == null
				&& request.getParameter("osubmit") == null
				&& request.getParameter("psubmit") == null
				&& request.getParameter("tsubmit") == null
				&& request.getParameter("sortsubmit") == null
				&& request.getParameter("sortDatesubmit") == null
				&& request.getParameter("numberDatesubmit") == null) {

			response.getWriter().print(doctorsTable);
		}

		response.getWriter()
				.println(
						"<a href=/SummaryTask4/jsp/admin/Doctors/DoctorsByCategory.jsp>Show doctors by categories</a>");

		response.setContentType("text/html");
		response.getWriter()
				.print("&nbsp;&nbsp;&nbsp;<a href=/SummaryTask4/jsp/admin/Doctors/addDoctor.jsp>add doctor</a>&nbsp;&nbsp;&nbsp;");
		response.getWriter()
				.print("<a href=/SummaryTask4/jsp/admin/Doctors/deleteDoctor.jsp>delete doctor</a>&nbsp;&nbsp;&nbsp;");
		response.getWriter()
				.print("<a href=/SummaryTask4/jsp/admin/Doctors/updateDoctor.jsp>Update doctor</a>&nbsp;&nbsp;&nbsp;<br>");
		response.getWriter()
				.print("</br>&nbsp;&nbsp;&nbsp;<a href=/SummaryTask4/Doctor>BACK</a>&nbsp;&nbsp;&nbsp;<br>");
		delete(request, response, cnr);
		String dentist = CollectionDoctor.findDentists(cnr);
		if (request.getParameter("dsubmit") != null) {
			response.getWriter().print(dentist);
		}
		String ginekolog = CollectionDoctor.findGynaecologists(cnr);
		if (request.getParameter("gsubmit") != null) {
			response.getWriter().print(ginekolog);
		}
		String nurse = CollectionDoctor.findNurses(cnr);
		if (request.getParameter("nsubmit") != null) {

			response.getWriter().print(nurse);
		}
		String neuropathologist = CollectionDoctor.findNeuropathologists(cnr);
		if (request.getParameter("neursubmit") != null) {

			response.getWriter().print(neuropathologist);
		}
		String otolaryngologist = CollectionDoctor.findOtolaryngologists(cnr);
		if (request.getParameter("osubmit") != null) {

			response.getWriter().print(otolaryngologist);
		}
		String psychologist = CollectionDoctor.findPsychologist(cnr);
		if (request.getParameter("psubmit") != null) {

			response.getWriter().print(psychologist);
		}
		String therapeutist = CollectionDoctor.findTherapeutists(cnr);
		if (request.getParameter("tsubmit") != null) {

			response.getWriter().print(therapeutist);
		}

		String sort = CollectionDoctor.sortDoctorsByAge(cnr);
		if (request.getParameter("sortsubmit") != null) {

			response.getWriter().print(sort);
		}
		String sortDate = CollectionDoctor.sortDoctorsBySurname(cnr);
		if (request.getParameter("sortDatesubmit") != null) {

			response.getWriter().print(sortDate);
		}
		String sortNOP = CollectionDoctor.sortDoctorsByNOP(cnr);
		if (request.getParameter("numberDatesubmit") != null) {
			response.getWriter().print(sortNOP);
		}
		if (request.getParameter("asubmit") != null) {

			Integer id = Integer.valueOf(request.getParameter("a_id"));
			String surname = request.getParameter("a_surname");
			String name = request.getParameter("a_name");
			String patronymic = request.getParameter("a_patronymic");
			String category = request.getParameter("a_category");
			Date dateOfBirth = Date.valueOf(request
					.getParameter("a_dateOfBirth"));
			String telephone = request.getParameter("a_telephone");
			Integer numberOfPatients = Integer.valueOf(request
					.getParameter("a_numberOfPatients"));

			try {
				DoctorDAOImpl.create(id, surname, name, patronymic, category,
						dateOfBirth, telephone, numberOfPatients, cnr);
			} catch (DBException e) {
				log.error("can not create ", e);
			}
			response.sendRedirect("/SummaryTask4/Doctor");
		}

		if (request.getParameter("INSERTsubmit") != null) {

			Integer id = Integer.valueOf(request.getParameter("INSERTId"));
			String surname = request.getParameter("INSERTSurname");
			String name = request.getParameter("INSERTName");
			String patronymic = request.getParameter("INSERTPatronymic");
			String category = request.getParameter("INSERTCategory");
			Date dateOfBirth = Date.valueOf(request
					.getParameter("INSERTDateOfBirth"));
			String telephone = request.getParameter("INSERTTelephone");
			Integer numberOfPatients = Integer.valueOf(request
					.getParameter("INSERTNumberOfPatients"));

			DoctorDAOImpl.update(id, surname, name, patronymic, category,
					dateOfBirth, telephone, numberOfPatients, cnr);
			response.sendRedirect("/SummaryTask4/Doctor");
		}

	}

	/**
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse
	 *      response)
	 */
	protected void doPost(HttpServletRequest request,
			HttpServletResponse response) throws ServletException, IOException {
		doGet(request, response);
	}

}
